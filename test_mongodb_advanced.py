#!/usr/bin/env python3
"""
Test de connexion MongoDB avec diff√©rentes strat√©gies TLS/SSL
"""
import os
from dotenv import load_dotenv
from pymongo import MongoClient
import ssl

# Charger les variables d'environnement
load_dotenv()


def test_mongodb_connections():
    """Teste diff√©rentes strat√©gies de connexion MongoDB"""

    mongodb_uri = os.getenv("MONGODB_URI")
    mongodb_db = os.getenv("MONGODB_DATABASE", "clinical_trials")

    if not mongodb_uri:
        print("‚ùå MONGODB_URI manquante dans .env")
        return False

    print(f"üîç Test avec URI: {mongodb_uri[:50]}...")
    print(f"üîç Database: {mongodb_db}")
    print("=" * 60)

    # Strat√©gies de connexion √† tester
    strategies = [
        {
            "name": "1. Configuration standard MongoDB 4.x",
            "options": {
                "serverSelectionTimeoutMS": 30000,
                "connectTimeoutMS": 30000,
                "retryWrites": True,
                "w": "majority",
            },
        },
        {
            "name": "2. TLS avec certificats flexibles",
            "options": {
                "serverSelectionTimeoutMS": 30000,
                "connectTimeoutMS": 30000,
                "tls": True,
                "tlsAllowInvalidCertificates": True,
            },
        },
        {
            "name": "3. SSL Context personnalis√© (Python)",
            "options": {
                "serverSelectionTimeoutMS": 30000,
                "connectTimeoutMS": 30000,
                "ssl": True,
                "ssl_cert_reqs": ssl.CERT_NONE,
                "ssl_check_hostname": False,
            },
        },
        {
            "name": "4. TLS insecure",
            "options": {
                "serverSelectionTimeoutMS": 30000,
                "connectTimeoutMS": 30000,
                "tlsInsecure": True,
            },
        },
        {
            "name": "5. Aucune option TLS (laisser MongoDB g√©rer)",
            "options": {"serverSelectionTimeoutMS": 30000, "connectTimeoutMS": 30000},
        },
    ]

    for strategy in strategies:
        print(f"\nüîÑ Test: {strategy['name']}")
        print("-" * 50)

        client = None
        try:
            client = MongoClient(mongodb_uri, **strategy["options"])

            # Test de connexion
            client.admin.command("ping")
            print("‚úÖ Connexion r√©ussie!")

            # Test de base de donn√©es
            db = client[mongodb_db]
            collection = db.trials

            # Test de comptage
            count = collection.count_documents({})
            print(f"‚úÖ Nombre de documents: {count}")

            # Test de lecture d'un document
            sample = collection.find_one({})
            if sample:
                print("‚úÖ Document de test r√©cup√©r√©")
                print(f"   ID: {str(sample.get('_id', 'N/A'))[:50]}")
            else:
                print("‚ö†Ô∏è  Aucun document dans la collection")

            print(f"üéâ SUCC√àS avec {strategy['name']}")
            return True

        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå √âchec: {error_msg[:200]}...")

            # Analyser le type d'erreur
            if "SSL" in error_msg or "TLS" in error_msg:
                print("üí° Erreur TLS/SSL d√©tect√©e")
            elif "timeout" in error_msg.lower():
                print("üí° Erreur de timeout d√©tect√©e")
            elif "authentication" in error_msg.lower():
                print("üí° Erreur d'authentification d√©tect√©e")
            else:
                print("üí° Autre type d'erreur")

        finally:
            if client:
                try:
                    client.close()
                except:
                    pass

    print("\n" + "=" * 60)
    print("‚ùå Toutes les strat√©gies ont √©chou√©")
    return False


def check_environment():
    """V√©rifie l'environnement et les versions"""
    print("üîç V√©rification de l'environnement")
    print("=" * 40)

    try:
        import pymongo

        print(f"‚úÖ PyMongo version: {pymongo.version}")
    except ImportError:
        print("‚ùå PyMongo non install√©")

    try:
        import ssl

        print(f"‚úÖ SSL version: {ssl.OPENSSL_VERSION}")
        print(f"‚úÖ SSL protocoles support√©s: {ssl.ssl_version}")
    except ImportError:
        print("‚ùå SSL non disponible")

    try:
        import dnspython

        print(f"‚úÖ DNSPython disponible")
    except ImportError:
        print("‚ùå DNSPython non install√©")

    print()


if __name__ == "__main__":
    print("üß™ Test avanc√© de connexion MongoDB Atlas")
    print("=" * 60)

    check_environment()
    success = test_mongodb_connections()

    print("\n" + "=" * 60)
    if success:
        print("üéâ Au moins une strat√©gie de connexion a fonctionn√©!")
    else:
        print("üí• Toutes les strat√©gies ont √©chou√©")
        print("\nüí° Solutions √† essayer:")
        print("   1. V√©rifiez que votre cluster MongoDB Atlas est d√©marr√©")
        print("   2. V√©rifiez votre nom d'utilisateur et mot de passe")
        print("   3. V√©rifiez que votre IP est dans la liste blanche")
        print("   4. Essayez de red√©marrer votre cluster Atlas")
        print("   5. Contactez le support MongoDB Atlas")
